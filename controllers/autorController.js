const autoresModel = require("../models/autores");
const transporter = require("../services/EmailService");

exports.getHome = (req, res, next) => {
  // Este es para presentar el home
  autoresModel.findAll().then((result) => {
    const autores = result.map((result) => result.dataValues);
    res.render("autores/home", {
      pageTitle: "CampuLibrary | Autores",
      Autores: autores,
      hasAutores: autores.length > 0,
    });
  });
};

exports.getAdmAdd = (req, res, next) => {
  //Para agregar
  res.render("autores/admAgregar", {
    pageTitle: "CampuLibrary | Agregar - Autores",
  });
};

exports.postAdmAdd = (req, res, next) => {
  //Este es para agregar
  const nombre = req.body.Nombre;
  const correo = req.body.Correo;
  autoresModel
    .create({
      autorName: nombre,
      correo,
      cantidadLibros: 0,
    })
    .then((result) => {
      // console.log(result.dataValues);
      res.redirect("/autores");
      // return transporter.sendMail({
      //   from: "CampuLibrary Company <no-reply@campulibrary.com>",
      //   to: correo,
      //   subject: `Â¡Bienvenido(a), Profesor ${nombre}!`,
      //   html: `
      //       <p>Hola Profesor ${nombre},</p>
      //       <p>Me complace informarle que ha sido agregado(a) a nuestra base de datos como autor(a) en CampuLibrary. Sin embargo, aquÃ­ estÃ¡ la parte divertida: Â¡usted es mi conejillo de indias! ðŸ˜œ</p>
      //       <p>DecidÃ­ probar este nuevo sistema de autores con usted porque, bueno, Â¿quiÃ©n mejor para experimentar que mi querido profesor? AsÃ­ que si algo sale mal, sepa que tiene el honor de ser el primero en descubrirlo.</p>
      //       <p>A continuaciÃ³n, algunos detalles sobre su cuenta:</p>
      //       <ul>
      //         <li><strong>Nombre de autor:</strong> ${nombre}</li>
      //         <li><strong>Correo electrÃ³nico registrado:</strong> ${correo}</li>
      //         <li><strong>Cantidad de libros inicial:</strong> 0</li>
      //       </ul>
      //       <p>Espero que disfrute de esta experiencia tanto como yo disfruto viendo si todo funciona como deberÃ­a. Si tiene alguna pregunta o encuentra algÃºn problema (lo cual, espero, no ocurra), no dude en contactarme.</p>
      //       <p>Â¡Gracias por su paciencia y sentido del humor!</p>
      //       <br>
      //       <p>Saludos cordiales,</p>
      //       <p>El equipo de CampuLibrary</p>
      //       <p><small>Este es un correo generado automÃ¡ticamente, por favor no responda a este mensaje.</small></p>
      //     `,
      // });
      return transporter.sendMail(
        {
          from: "CampuLibrary Company <no-reply@campulibrary.com>",
          to: correo,
          subject: `Â¡Bienvenido(a), ${nombre}!`,
          html: `
            <p>Estimado(a) ${nombre},</p>
            <p>Nos complace informarle que ha sido agregado(a) a nuestra base de datos como autor(a) en CampuLibrary.</p>
            <p>A partir de ahora, podrÃ¡ gestionar sus libros y publicaciones a travÃ©s de nuestra plataforma. Estamos emocionados de ver sus futuras contribuciones y estamos aquÃ­ para apoyar su viaje como autor(a).</p>
            <p>Si tiene alguna pregunta o necesita asistencia, no dude en ponerse en contacto con nosotros.</p>
            <p>Â¡Bienvenido(a) una vez mÃ¡s a CampuLibrary!</p>
            <br>
            <p>Atentamente,</p>
            <p>El equipo de CampuLibrary</p>
            <p><small>Este es un correo generado automÃ¡ticamente, por favor no responda a este mensaje.</small></p>
          `,
        },
        (err) => {
          console.log(err);
        }
      );
    })
    .catch((error) => {
      console.log(error);
    });
};

exports.getAdmEdd = (req, res, next) => {
  // Este es para editar
  const elemetnID = req.params.elemetnId;
  autoresModel
    .findOne({ where: { id: elemetnID } })
    .then((result) => {
      if (result) {
        res.render("autores/admEditar", {
          pageTitle: `CampuLibrary | Editar - ${result.autorName}`,
          Autor: result.dataValues,
        });
      } else {
        res.redirect("/autores");
      }
    })
    .catch((err) => {
      console.error("Error al eliminar al autor: ", err);
      res.redirect("/autores");
    });
};

exports.postEditar = (req, res, next) => {
  const autorId = req.body.elemetnId;
  const nombre = req.body.Nombre;
  const correo = req.body.Correo;

  autoresModel
    .update({ autorName: nombre, correo }, { where: { id: autorId } })
    .then(() => {
      return res.redirect("/autores");
    })
    .catch((error) => {
      console.log(error);
    });
};

exports.postEliminar = (req, res, next) => {
  const idElemt = req.body.elemetnId;
  autoresModel
    .findOne({ where: { id: idElemt } })
    .then((result) => {
      if (result) {
        return result.destroy();
      } else {
        console.log("Autor no encontrado");
        res.redirect("/autores");
      }
    })
    .then(() => {
      console.log("Autor eliminado");
      res.redirect("/autores");
    })
    .catch((err) => {
      console.error("Error al eliminar al autor: ", err);
      res.redirect("/autores");
    });
};
